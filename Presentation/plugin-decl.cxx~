// GCC header includes to get the parse tree declarations. The order
// is important and doesn't follow any kind of logic.
//

#include <stdlib.h>
#include <gmp.h>

#include <cstdlib> // Include before GCC poison some declarations.

extern "C"
{
#include "gcc-plugin.h"

#include "config.h"
#include "system.h"
#include "coretypes.h"
#include "tree.h"
#include "tree-iterator.h"
#include "intl.h"

#include "tm.h"

#include "diagnostic.h"
  //#include "c-common.h"
  //#include "c-pragma.h"
  //#include "cp/cp-tree.h"
}
#include <set>
#include <string>
#include <iostream>

//my inclusions
#include <list>
#include <iostream>
#include <fstream>
//#include <algorithm>
using namespace std;

int plugin_is_GPL_compatible;
 

extern "C" void myprint_declaration(tree decl);

extern "C" string manage_types(tree nodetype, bool isPuntator);

extern "C" void navigate_statements(tree statement_list);
extern "C" void navigate_expression(tree my_tree);

list<tree_node*> list_functions_call_without_body;
list<tree_node*> list_functions;
list<tree_node*> list_functions_tomock;

ofstream myfile;
ofstream headerfile;


 

extern "C" 
void cb_declaration(void *node, void *user_data){
  cout << "****** Declaration beccata! *******" << endl;
  tree_node *tn = reinterpret_cast<tree_node*>(node);
 
  debug_tree(tn);

}

extern "C" int
plugin_init (plugin_name_args* info,
             plugin_gcc_version*)
{
  int r (0);

  cerr << "starting " << info->base_name << endl;
  //
  // Parse options if any.
  //

  // Disable assembly output.
  //
 // asm_file_name = HOST_BIT_BUCKET;
  
  // Register callbacks.
  //
  
  register_callback(info->base_name,
		    PLUGIN_FINISH_TYPE,
		    &cb_declaration,
		    0);

   
  return r;
}
